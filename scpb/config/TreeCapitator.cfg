# Configuration file

####################
# general_settings
####################

general_settings {
    ####################
    # miscellaneous_settings
    ####################

    miscellaneous_settings {
        # [Global] Set to true if you want TreeCapitator to log info about what it's doing, false to disable.
        # If you are having an issue with the mod, set this option to true and post the resulting log to the
        # Treecapitator Minecraftforum.net thread along with a detailed description of the issue. [default: false]
        B:allowDebugLogging=false

        # [Global] Set to true if you want TreeCapitator to tell you what kind of block you have clicked when 
        # sneaking, false to disable. [default: false]
        B:allowDebugOutput=false

        # [Global] When true, TreeCapitator will scan the Forge Ore Dictionary for blocks with an ore name matching
        # one of the strings in oreDictionaryLogStrings and generate a generic tree definition for them on the fly. 
        # When false oreDictionaryLogStrings and oreDictionaryLeafStrings will be ignored. [default: true]
        B:allowOreDictionaryLookup=true

        # [Global] Add unique block names to this list if you want to keep them from being registered as logs. This list will override
        # the local user configuration, inter-mod communication (IMC) configuration, and the Ore Dictionary scanning feature.
        # Use ',' to split block name from metadata and ';' to split entries.
        # Refer to the UniqueNames.txt file in the config folder for a list of values. [default: ]
        S:blockIDBlacklist=

        # [Global] Flag to disable drops in Creative mode [default: false]
        B:disableCreativeDrops=false

        # [Global] Flag to disable tree chopping in Creative mode [default: false]
        B:disableInCreative=false

        # [Global] Add unique item names to this list if you want to keep them from being registered as axes. This list will override
        # the local user configuration and inter-mod communication (IMC) configuration.
        # Use ',' to split item name from metadata and ';' to split entries.
        # Refer to the UniqueNames.txt file in the config folder for a list of values. [default: ]
        S:itemIDBlacklist=

        # [Global] The list of leaf type values to check for in the Forge Ore Dictionary. Entries are comma (,) separated. [default: treeLeaves,]
        S:oreDictionaryLeafStrings=treeLeaves,

        # [Global] The list of log type values to check for in the Forge Ore Dictionary. Entries are comma (,) separated. [default: logWood,]
        S:oreDictionaryLogStrings=logWood,

        # [Global] Set sneakAction = "disable" to disable tree chopping while sneaking,
        # set sneakAction = "enable" to only enable tree chopping while sneaking,
        # set sneakAction = "none" to have tree chopping enabled regardless of sneaking. [default: disable]
        S:sneakAction=enable
    }

    ####################
    # break_speed_settings
    ####################

    break_speed_settings {
        # [Global, PerTree] When using an item that can chop trees, the break speed will by multiplied by this value
        # THIS OPTION IS IGNORED WHEN treeHeightDecidesBreakSpeed=true [range: 0.01 ~ 1.0, default: 0.256]
        S:breakSpeedModifier=0.256

        # [Global] When true, the log break speed is equal to original break speed / (tree height * <treeHeightModifier>)
        # When false, the original break speed is multiplied by the breakSpeedModifier value [default: true]
        B:treeHeightDecidesBreakSpeed=true

        # [Global] See description for treeHeightDecidesBreakSpeed [range: 0.25 ~ 10.0, default: 2.0]
        S:treeHeightModifier=2.0
    }

    ####################
    # item_settings
    ####################

    item_settings {
        # [Global] Enable to cause item damage based on number of blocks destroyed [default: true]
        B:allowItemDamage=true

        # [Global] Enable to allow chopping down the entire tree even if your item does not have enough damage 
        # remaining to cover the number of blocks. [default: false]
        B:allowMoreBlocksThanDamage=false

        # [Global] When useIncreasingItemDamage=true the damage applied per block broken will increase by this 
        # amount every increaseDamageEveryXBlocks blocks broken in a tree. [range: 0.1 ~ 100.0, default: 1.0]
        S:damageIncreaseAmount=1.0

        # [Global] Axes and shears will take damage this many times for each log broken. Remaining damage is 
        # rounded and applied to tools when a tree is finished. [range: 0.1 ~ 50.0, default: 1.0]
        S:damageMultiplier=1.0

        # [Global] When useIncreasingItemDamage=true the damage applied per block broken will increase each time 
        # this many blocks are broken in a tree. [range: 1 ~ 500, default: 8]
        I:increaseDamageEveryXBlocks=8

        # [Global] Whether you need an item from the axeIDList to chop down a tree. Disabling will let you chop 
        # trees with any item. [default: true]
        B:needItem=true

        # [Global] Set to true to have the per-block item damage amount increase after every 
        # increaseDamageEveryXBlocks blocks are broken. [default: false]
        B:useIncreasingItemDamage=false
    }

    ####################
    # tree_chop_behavior_settings
    ####################

    tree_chop_behavior_settings {
        # [Global, PerTree] Set to false to disable TreeCapitator Smart Tree Detection.
        # Smart Tree Detection counts the number of leaf blocks that are adjacent to the
        # top-most connected log block at the x, z location of a log you've broken. If
        # there are at least minLeavesToID leaf blocks within maxLeafIDDist blocks then
        # TreeCapitator considers it a tree and allows chopping.
        # WARNING: Disabling Smart Tree Detection will remove the only safeguard against
        # accidentally destroying a log structure.  Make sure you know what you're doing! [default: true]
        B:allowSmartTreeDetection=true

        # [Global] Enabling this will make leaves be destroyed when trees are chopped. [default: true]
        B:destroyLeaves=true

        # [Global, PerTree] The maximum horizontal distance that the leaf breaking effect will travel from the tree (use -1 for no limit). [range: -1 ~ 100, default: 4]
        I:maxHorLeafBreakDist=4

        # [Global, PerTree] The maximum horizontal distance that the log breaking effect will travel (use -1 for no limit). [range: -1 ~ 100, default: 16]
        I:maxHorLogBreakDist=16

        # [Global, PerTree] If a tree's top log is not close enough to leaf blocks, the tree will not be chopped.
        # Increasing this value will search further.  I would try to keep it at or below 3. [range: 1 ~ 8, default: 1]
        I:maxLeafIDDist=1

        # [Global, PerTree] The maximum vertical distance that the log breaking effect will travel (use -1 for no limit). [range: -1 ~ 255, default: -1]
        I:maxVerLogBreakDist=-1

        # [Global, PerTree] The minimum number of leaves within maxLeafIDDist of the top log block required to identify a tree. [range: 0 ~ 8, default: 3]
        I:minLeavesToID=3

        # [Global, PerTree] Setting this to false will allow the chopping to move downward as well as upward (and 
        # blocks below the one you break will be chopped) [default: true]
        B:onlyDestroyUpwards=true

        # [Global, PerTree] When true TreeCapitator will only instantly decay leaves that have actually been marked 
        # for decay. Set to false if you want leaves to be destroyed regardless of their decay status 
        # (hint: or for "leaf" blocks that are not really leaves). [default: true]
        B:requireLeafDecayCheck=true

        # [Global] Enabling this will cause destroyed leaves to be sheared when a shearing item is in the hotbar 
        # (ignored if destroyLeaves is false). [default: false]
        B:shearLeaves=false

        # [Global] Enabling this will shear /some/ of the vines on a tree when a shearing item is in the hotbar 
        # (ignored if destroyLeaves is false). [default: false]
        B:shearVines=false

        # [Global, PerTree] Set to false to use the older "top log" algorithm for finding the top log of a tree.
        # The old algorithm searches only the vertical column of blocks above the log you are chopping,
        # the newer algorithm is able to branch out to find the true top log of a tree. [default: true]
        B:useAdvancedTopLogLogic=true

        # [Global] Set to true if you want only the log/leaf blocks listed with each log in a tree
        # to break when that log type is chopped.  When set to false it will break
        # any log/leaf type blocks connected to the tree, not just the types for that tree. [default: true]
        B:useStrictBlockPairing=true
    }

    ####################
    # enchantment_mode_settings
    ####################

    enchantment_mode_settings {
        # [Global] Toggle for whether or not to use the Treecapitating enchantment as opposed to requiring an item 
        # to be in the axeIDList to chop a tree. [default: false]
        B:enableEnchantmentMode=false

        # [Global] The internal ID for the Treecapitating enchantment. Change this if the default ID is conflicting 
        # with another mod. [range: 0 ~ 255, default: 187]
        I:enchantmentID=187

        # [Global] Whether or not to check the axe ID list for an item when determining if a given item can be 
        # imbued with the Treecapitating enchantment.
        # NOTE: when set to false, any ItemTool type item (pickaxes, shovels, etc) with a high enough 
        # enchantability level can get the enchantment, not just axes. [default: true]
        B:requireItemInAxeListForEnchant=true
    }

}


####################
# tree_and_mod_configs
#===================
# This category is where all your settings live that are related to 3rd party mods.
# NOTE: Using item or block number IDs WILL NOT WORK. Refer to the UniqueNames.txt file in the config folder for a list of values.
# 
# How to add new mods: 
# 
# Keep in mind that you can also include settings marked with [PerTree] on a per-tree basis to override the global default values.
# 
# Format:
#     <section_name> { (typically same as modID)
#         S:modID=<modID> (this can be found on the Mods screen in game or in mcmod.info)
#         S:axeIDList=<unique_item_identifier>,<optional metadata>; minecraft:wooden_axe; minecraft:stone_axe
#         S:shearsIDList=<unique_item_identifier>,<optional metadata>
#         B:overrideIMC=<optional, defaults to false) whether or not a mod's user config (this file) should override a mod's IMC config (IMC allows mods to send messages to each other for compatibility)
# 
#         <tree_name> { (the tree name is just for organization and clarity)
#             # logs/leaves: list of unique block name values. "," separates name and metadata, ";" separates block entries
#             S:logs=<unique block identifier>,<optional metadata>; <unique_block_identifier>,0; minecraft:log,0
#             S:leaves=<unique block identifier>,<optional metadata>; <unique_block_identifier>,0; minecraft:leaves,0
#             [optionally add per-tree settings here]
# 
#         }
#     }
####################

tree_and_mod_configs {
    # The mod ID value for Multi-Mine. [default: AS_MultiMine]
    S:multiMineID=AS_MultiMine

    # This setting controls whether or not IMC config messages sent by other mods will be saved to the local
    # config file when they are processed by Treecapitator. The message will only be saved if your local config
    # for a given mod is not set to override the IMC message. [default: true]
    B:saveIMCConfigsToFile=true

    # This setting controls the default behavior when a mod is both configured manually (in the config file) and 
    # by the mod itself via IMC (inter-mod communication). [default: false]
    B:userConfigOverridesIMC=false
    ####################
    # 1_vanilla_trees_and_items
    #===================
    # This special category is the home of the vanilla tree block and item configurations. You can change the 
    # values in this category to suit your preferences.
    # 
    # WARNING: This config category must not be removed! If this category is renamed or removed TreeCapitator 
    # will assume your config file is new and reload the default user mod config settings!
    ####################

    1_vanilla_trees_and_items {
        S:axeIDList=minecraft:wooden_axe; minecraft:stone_axe; minecraft:iron_axe; minecraft:golden_axe; minecraft:diamond_axe
        S:modID=TreeCapitator

        # This setting controls whether or not the mod config section it appears in will override an IMC message sent by that mod. [default: false]
        B:overrideIMC=false
        S:shearsIDList=minecraft:shears
        ####################
        # vanilla_acacia
        ####################

        vanilla_acacia {
            S:leaves=minecraft:leaves2, 0; minecraft:leaves2, 8
            S:logs=minecraft:log2, 0; minecraft:log2, 4; minecraft:log2, 8; minecraft:log2, 12
        }

        ####################
        # vanilla_birch
        ####################

        vanilla_birch {
            S:leaves=minecraft:leaves, 2; minecraft:leaves, 10
            S:logs=minecraft:log, 2; minecraft:log, 6; minecraft:log, 10; minecraft:log, 14
        }

        ####################
        # vanilla_dark_oak
        ####################

        vanilla_dark_oak {
            S:leaves=minecraft:leaves2, 1; minecraft:leaves2, 9
            S:logs=minecraft:log2, 1; minecraft:log2, 5; minecraft:log2, 9; minecraft:log2, 13
        }

        ####################
        # vanilla_future_tree_1
        ####################

        vanilla_future_tree_1 {
            S:leaves=minecraft:leaves2, 2; minecraft:leaves2, 10
            S:logs=minecraft:log2, 2; minecraft:log2, 6; minecraft:log2, 10; minecraft:log2, 14
        }

        ####################
        # vanilla_future_tree_2
        ####################

        vanilla_future_tree_2 {
            S:leaves=minecraft:leaves2, 3; minecraft:leaves2, 11
            S:logs=minecraft:log2, 3; minecraft:log2, 7; minecraft:log2, 11; minecraft:log2, 15
        }

        ####################
        # vanilla_huge_brown_mushroom
        ####################

        vanilla_huge_brown_mushroom {
            S:leaves=minecraft:brown_mushroom_block, 1; minecraft:brown_mushroom_block, 2; minecraft:brown_mushroom_block, 3; minecraft:brown_mushroom_block, 4; minecraft:brown_mushroom_block, 5; minecraft:brown_mushroom_block, 6; minecraft:brown_mushroom_block, 7; minecraft:brown_mushroom_block, 8; minecraft:brown_mushroom_block, 9; minecraft:brown_mushroom_block, 14
            S:logs=minecraft:brown_mushroom_block, 10; minecraft:brown_mushroom_block, 15
            I:maxHorLeafBreakDist=6
            B:requireLeafDecayCheck=false
        }

        ####################
        # vanilla_huge_red_mushroom
        ####################

        vanilla_huge_red_mushroom {
            S:leaves=minecraft:red_mushroom_block, 1; minecraft:red_mushroom_block, 2; minecraft:red_mushroom_block, 3; minecraft:red_mushroom_block, 4; minecraft:red_mushroom_block, 5; minecraft:red_mushroom_block, 6; minecraft:red_mushroom_block, 7; minecraft:red_mushroom_block, 8; minecraft:red_mushroom_block, 9; minecraft:red_mushroom_block, 14
            S:logs=minecraft:red_mushroom_block, 10; minecraft:red_mushroom_block, 15
            I:maxHorLeafBreakDist=6
            B:requireLeafDecayCheck=false
        }

        ####################
        # vanilla_jungle
        ####################

        vanilla_jungle {
            S:leaves=minecraft:leaves, 3; minecraft:leaves, 11; minecraft:leaves, 0; minecraft:leaves, 8
            S:logs=minecraft:log, 3; minecraft:log, 7; minecraft:log, 11; minecraft:log, 15
            I:maxHorLeafBreakDist=6
            B:requireLeafDecayCheck=false
        }

        ####################
        # vanilla_oak
        ####################

        vanilla_oak {
            S:leaves=minecraft:leaves, 0; minecraft:leaves, 8
            S:logs=minecraft:log, 0; minecraft:log, 4; minecraft:log, 8; minecraft:log, 12
        }

        ####################
        # vanilla_spruce
        ####################

        vanilla_spruce {
            S:leaves=minecraft:leaves, 1; minecraft:leaves, 9
            S:logs=minecraft:log, 1; minecraft:log, 5; minecraft:log, 9; minecraft:log, 13
        }

    }

    ####################
    # biomesoplenty
    ####################

    biomesoplenty {
        S:axeIDList=BiomesOPlenty:axeAmethyst; BiomesOPlenty:axeMud
        S:modID=BiomesOPlenty

        # This setting controls whether or not the mod config section it appears in will override an IMC message sent by that mod. [default: false]
        B:overrideIMC=false
        ####################
        # big_flower
        ####################

        big_flower {
            S:leaves=BiomesOPlenty:petals
            S:logs=BiomesOPlenty:logs3, 3; BiomesOPlenty:logs3, 7; BiomesOPlenty:logs3, 11

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # cherry
        ####################

        cherry {
            S:leaves=BiomesOPlenty:leaves3, 1; BiomesOPlenty:leaves3, 9; BiomesOPlenty:leaves3, 3; BiomesOPlenty:leaves3, 11
            S:logs=BiomesOPlenty:logs1, 1; BiomesOPlenty:logs1, 5; BiomesOPlenty:logs1, 9

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # darkwood
        ####################

        darkwood {
            S:leaves=BiomesOPlenty:leaves1, 3; BiomesOPlenty:leaves1, 11
            S:logs=BiomesOPlenty:logs1, 2; BiomesOPlenty:logs1, 6; BiomesOPlenty:logs1, 10

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # dead
        ####################

        dead {
            S:leaves=
            S:logs=BiomesOPlenty:logs3, 2; BiomesOPlenty:logs3, 6; BiomesOPlenty:logs3, 10

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # fir
        ####################

        fir {
            S:leaves=BiomesOPlenty:leaves2, 2; BiomesOPlenty:leaves2, 10
            S:logs=BiomesOPlenty:logs1, 3; BiomesOPlenty:logs1, 7; BiomesOPlenty:logs1, 11

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # hellbark
        ####################

        hellbark {
            S:leaves=BiomesOPlenty:leaves4, 0; BiomesOPlenty:leaves4, 8
            S:logs=BiomesOPlenty:logs4, 1; BiomesOPlenty:logs4, 5; BiomesOPlenty:logs4, 9

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # holy
        ####################

        holy {
            S:leaves=BiomesOPlenty:leaves2, 2; BiomesOPlenty:leaves2, 10
            S:logs=BiomesOPlenty:logs2, 0; BiomesOPlenty:logs2, 4; BiomesOPlenty:logs2, 8

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # jacaranda
        ####################

        jacaranda {
            S:leaves=BiomesOPlenty:leaves4, 1; BiomesOPlenty:leaves4, 9
            S:logs=BiomesOPlenty:logs4, 2; BiomesOPlenty:logs4, 6; BiomesOPlenty:logs4, 10

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # magic
        ####################

        magic {
            S:leaves=BiomesOPlenty:leaves1, 2; BiomesOPlenty:leaves1, 10
            S:logs=BiomesOPlenty:logs2, 1; BiomesOPlenty:logs2, 5; BiomesOPlenty:logs2, 9

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # mahogany
        ####################

        mahogany {
            S:leaves=BiomesOPlenty:colorizedLeaves2, 2; BiomesOPlenty:colorizedLeaves2, 10
            S:logs=BiomesOPlenty:logs4, 3; BiomesOPlenty:logs4, 7; BiomesOPlenty:logs4, 11

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # mangrove
        ####################

        mangrove {
            S:leaves=BiomesOPlenty:colorizedLeaves1, 1; BiomesOPlenty:colorizedLeaves1, 9
            S:logs=BiomesOPlenty:logs2, 2; BiomesOPlenty:logs2, 6; BiomesOPlenty:logs2, 10

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # palm
        ####################

        palm {
            S:leaves=BiomesOPlenty:colorizedLeaves1, 2; BiomesOPlenty:colorizedLeaves1, 10
            S:logs=BiomesOPlenty:logs2, 3; BiomesOPlenty:logs2, 7; BiomesOPlenty:logs2, 11

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # pine
        ####################

        pine {
            S:leaves=BiomesOPlenty:colorizedLeaves2, 1; BiomesOPlenty:colorizedLeaves2, 9
            S:logs=BiomesOPlenty:logs4, 0; BiomesOPlenty:logs4, 4; BiomesOPlenty:logs4, 8

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # redwood
        ####################

        redwood {
            S:leaves=BiomesOPlenty:colorizedLeaves1, 3; BiomesOPlenty:colorizedLeaves1, 11
            S:logs=BiomesOPlenty:logs3, 0; BiomesOPlenty:logs3, 4; BiomesOPlenty:logs3, 8

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # sacredoak
        ####################

        sacredoak {
            S:leaves=BiomesOPlenty:colorizedLeaves1, 0; BiomesOPlenty:colorizedLeaves1, 8
            S:logs=BiomesOPlenty:logs1, 0; BiomesOPlenty:logs1, 4; BiomesOPlenty:logs1, 8

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # vanilla_birch
        ####################

        vanilla_birch {
            S:leaves=BiomesOPlenty:leaves1, 0
            S:logs=

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # vanilla_jungle
        ####################

        vanilla_jungle {
            S:leaves=
            S:logs=

            # Optional
            I:maxLeafIDDist=3
        }

        ####################
        # vanilla_oak
        ####################

        vanilla_oak {
            S:leaves=BiomesOPlenty:leaves2, 0; BiomesOPlenty:leaves2, 3; BiomesOPlenty:appleLeaves; BiomesOPlenty:persimmonLeaves, 0; BiomesOPlenty:leaves2, 0; BiomesOPlenty:leaves3, 2; 18, 2; 18, 10
            S:logs=

            # Optional
            B:requireLeafDecayCheck=false
        }

        ####################
        # willow
        ####################

        willow {
            S:leaves=BiomesOPlenty:colorizedLeaves2, 0; BiomesOPlenty:colorizedLeaves2, 8
            S:logs=BiomesOPlenty:logs3, 1; BiomesOPlenty:logs3, 5; BiomesOPlenty:logs3, 9

            # Optional
            B:requireLeafDecayCheck=false
        }

    }

}


